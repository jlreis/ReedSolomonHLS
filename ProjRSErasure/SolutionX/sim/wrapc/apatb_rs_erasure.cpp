// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "c_0"
#define AUTOTB_TVOUT_c_0  "../tv/cdatafile/c.rs_erasure.autotvout_c_0.dat"
// wrapc file define: "c_1"
#define AUTOTB_TVOUT_c_1  "../tv/cdatafile/c.rs_erasure.autotvout_c_1.dat"
// wrapc file define: "c_2"
#define AUTOTB_TVOUT_c_2  "../tv/cdatafile/c.rs_erasure.autotvout_c_2.dat"
// wrapc file define: "c_3"
#define AUTOTB_TVOUT_c_3  "../tv/cdatafile/c.rs_erasure.autotvout_c_3.dat"
// wrapc file define: "d_0"
#define AUTOTB_TVIN_d_0  "../tv/cdatafile/c.rs_erasure.autotvin_d_0.dat"
// wrapc file define: "d_1"
#define AUTOTB_TVIN_d_1  "../tv/cdatafile/c.rs_erasure.autotvin_d_1.dat"
// wrapc file define: "d_2"
#define AUTOTB_TVIN_d_2  "../tv/cdatafile/c.rs_erasure.autotvin_d_2.dat"
// wrapc file define: "d_3"
#define AUTOTB_TVIN_d_3  "../tv/cdatafile/c.rs_erasure.autotvin_d_3.dat"
// wrapc file define: "d_4"
#define AUTOTB_TVIN_d_4  "../tv/cdatafile/c.rs_erasure.autotvin_d_4.dat"
// wrapc file define: "d_5"
#define AUTOTB_TVIN_d_5  "../tv/cdatafile/c.rs_erasure.autotvin_d_5.dat"
// wrapc file define: "d_6"
#define AUTOTB_TVIN_d_6  "../tv/cdatafile/c.rs_erasure.autotvin_d_6.dat"
// wrapc file define: "d_7"
#define AUTOTB_TVIN_d_7  "../tv/cdatafile/c.rs_erasure.autotvin_d_7.dat"
// wrapc file define: "d_8"
#define AUTOTB_TVIN_d_8  "../tv/cdatafile/c.rs_erasure.autotvin_d_8.dat"
// wrapc file define: "d_9"
#define AUTOTB_TVIN_d_9  "../tv/cdatafile/c.rs_erasure.autotvin_d_9.dat"
// wrapc file define: "d_10"
#define AUTOTB_TVIN_d_10  "../tv/cdatafile/c.rs_erasure.autotvin_d_10.dat"
// wrapc file define: "d_11"
#define AUTOTB_TVIN_d_11  "../tv/cdatafile/c.rs_erasure.autotvin_d_11.dat"
// wrapc file define: "survival_pattern"
#define AUTOTB_TVIN_survival_pattern  "../tv/cdatafile/c.rs_erasure.autotvin_survival_pattern.dat"
// wrapc file define: "codeidx"
#define AUTOTB_TVIN_codeidx  "../tv/cdatafile/c.rs_erasure.autotvin_codeidx.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "c_0"
#define AUTOTB_TVOUT_PC_c_0  "../tv/rtldatafile/rtl.rs_erasure.autotvout_c_0.dat"
// tvout file define: "c_1"
#define AUTOTB_TVOUT_PC_c_1  "../tv/rtldatafile/rtl.rs_erasure.autotvout_c_1.dat"
// tvout file define: "c_2"
#define AUTOTB_TVOUT_PC_c_2  "../tv/rtldatafile/rtl.rs_erasure.autotvout_c_2.dat"
// tvout file define: "c_3"
#define AUTOTB_TVOUT_PC_c_3  "../tv/rtldatafile/rtl.rs_erasure.autotvout_c_3.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			c_0_depth = 0;
			c_1_depth = 0;
			c_2_depth = 0;
			c_3_depth = 0;
			d_0_depth = 0;
			d_1_depth = 0;
			d_2_depth = 0;
			d_3_depth = 0;
			d_4_depth = 0;
			d_5_depth = 0;
			d_6_depth = 0;
			d_7_depth = 0;
			d_8_depth = 0;
			d_9_depth = 0;
			d_10_depth = 0;
			d_11_depth = 0;
			survival_pattern_depth = 0;
			codeidx_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{c_0 " << c_0_depth << "}\n";
			total_list << "{c_1 " << c_1_depth << "}\n";
			total_list << "{c_2 " << c_2_depth << "}\n";
			total_list << "{c_3 " << c_3_depth << "}\n";
			total_list << "{d_0 " << d_0_depth << "}\n";
			total_list << "{d_1 " << d_1_depth << "}\n";
			total_list << "{d_2 " << d_2_depth << "}\n";
			total_list << "{d_3 " << d_3_depth << "}\n";
			total_list << "{d_4 " << d_4_depth << "}\n";
			total_list << "{d_5 " << d_5_depth << "}\n";
			total_list << "{d_6 " << d_6_depth << "}\n";
			total_list << "{d_7 " << d_7_depth << "}\n";
			total_list << "{d_8 " << d_8_depth << "}\n";
			total_list << "{d_9 " << d_9_depth << "}\n";
			total_list << "{d_10 " << d_10_depth << "}\n";
			total_list << "{d_11 " << d_11_depth << "}\n";
			total_list << "{survival_pattern " << survival_pattern_depth << "}\n";
			total_list << "{codeidx " << codeidx_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int c_0_depth;
		int c_1_depth;
		int c_2_depth;
		int c_3_depth;
		int d_0_depth;
		int d_1_depth;
		int d_2_depth;
		int d_3_depth;
		int d_4_depth;
		int d_5_depth;
		int d_6_depth;
		int d_7_depth;
		int d_8_depth;
		int d_9_depth;
		int d_10_depth;
		int d_11_depth;
		int survival_pattern_depth;
		int codeidx_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void rs_erasure (
char c[4],
char d[12],
short survival_pattern,
char codeidx);

extern "C" void AESL_WRAP_rs_erasure (
char c[4],
char d[12],
short survival_pattern,
char codeidx)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "c_0"
		aesl_fh.read(AUTOTB_TVOUT_PC_c_0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_c_0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_c_0, AESL_token); // data

			sc_bv<8> *c_0_pc_buffer = new sc_bv<8>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					c_0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_c_0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_c_0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: c_0
				{
					// bitslice(7, 0)
					// {
						// celement: c(7, 0)
						// {
							sc_lv<8>* c_lv0_0_0_2 = new sc_lv<8>[1];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c_lv0_0_0_2[hls_map_index].range(7, 0) = sc_bv<8>(c_0_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : c[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : c[0]
								// output_left_conversion : c[i_0]
								// output_type_conversion : (c_lv0_0_0_2[hls_map_index]).to_uint64()
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c[i_0] = (c_lv0_0_0_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] c_0_pc_buffer;
		}

		// output port post check: "c_1"
		aesl_fh.read(AUTOTB_TVOUT_PC_c_1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_c_1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_c_1, AESL_token); // data

			sc_bv<8> *c_1_pc_buffer = new sc_bv<8>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					c_1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_c_1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_c_1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: c_1
				{
					// bitslice(7, 0)
					// {
						// celement: c(7, 0)
						// {
							sc_lv<8>* c_lv0_1_1_2 = new sc_lv<8>[1];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c_lv0_1_1_2[hls_map_index].range(7, 0) = sc_bv<8>(c_1_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : c[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : c[0]
								// output_left_conversion : c[i_0]
								// output_type_conversion : (c_lv0_1_1_2[hls_map_index]).to_uint64()
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c[i_0] = (c_lv0_1_1_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] c_1_pc_buffer;
		}

		// output port post check: "c_2"
		aesl_fh.read(AUTOTB_TVOUT_PC_c_2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_c_2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_c_2, AESL_token); // data

			sc_bv<8> *c_2_pc_buffer = new sc_bv<8>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					c_2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_c_2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_c_2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: c_2
				{
					// bitslice(7, 0)
					// {
						// celement: c(7, 0)
						// {
							sc_lv<8>* c_lv0_2_2_2 = new sc_lv<8>[1];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c_lv0_2_2_2[hls_map_index].range(7, 0) = sc_bv<8>(c_2_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : c[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : c[0]
								// output_left_conversion : c[i_0]
								// output_type_conversion : (c_lv0_2_2_2[hls_map_index]).to_uint64()
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c[i_0] = (c_lv0_2_2_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] c_2_pc_buffer;
		}

		// output port post check: "c_3"
		aesl_fh.read(AUTOTB_TVOUT_PC_c_3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_c_3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_c_3, AESL_token); // data

			sc_bv<8> *c_3_pc_buffer = new sc_bv<8>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'c_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					c_3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_c_3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_c_3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: c_3
				{
					// bitslice(7, 0)
					// {
						// celement: c(7, 0)
						// {
							sc_lv<8>* c_lv0_3_3_2 = new sc_lv<8>[1];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c_lv0_3_3_2[hls_map_index].range(7, 0) = sc_bv<8>(c_3_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: c(7, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : c[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : c[0]
								// output_left_conversion : c[i_0]
								// output_type_conversion : (c_lv0_3_3_2[hls_map_index]).to_uint64()
								if (&(c[0]) != NULL) // check the null address if the c port is array or others
								{
									c[i_0] = (c_lv0_3_3_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] c_3_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "c_0"
		char* tvout_c_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_c_0);

		// "c_1"
		char* tvout_c_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_c_1);

		// "c_2"
		char* tvout_c_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_c_2);

		// "c_3"
		char* tvout_c_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_c_3);

		// "d_0"
		char* tvin_d_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_0);

		// "d_1"
		char* tvin_d_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_1);

		// "d_2"
		char* tvin_d_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_2);

		// "d_3"
		char* tvin_d_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_3);

		// "d_4"
		char* tvin_d_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_4);

		// "d_5"
		char* tvin_d_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_5);

		// "d_6"
		char* tvin_d_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_6);

		// "d_7"
		char* tvin_d_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_7);

		// "d_8"
		char* tvin_d_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_8);

		// "d_9"
		char* tvin_d_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_9);

		// "d_10"
		char* tvin_d_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_10);

		// "d_11"
		char* tvin_d_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_11);

		// "survival_pattern"
		char* tvin_survival_pattern = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_survival_pattern);

		// "codeidx"
		char* tvin_codeidx = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_codeidx);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_d_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_0, tvin_d_0);

		sc_bv<8>* d_0_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_0
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_0_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_0, "%s\n", (d_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_0, tvin_d_0);
		}

		tcl_file.set_num(1, &tcl_file.d_0_depth);
		sprintf(tvin_d_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_0, tvin_d_0);

		// release memory allocation
		delete [] d_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_1, tvin_d_1);

		sc_bv<8>* d_1_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_1
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_1_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_1, "%s\n", (d_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_1, tvin_d_1);
		}

		tcl_file.set_num(1, &tcl_file.d_1_depth);
		sprintf(tvin_d_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_1, tvin_d_1);

		// release memory allocation
		delete [] d_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_2, tvin_d_2);

		sc_bv<8>* d_2_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_2
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_2_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_2, "%s\n", (d_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_2, tvin_d_2);
		}

		tcl_file.set_num(1, &tcl_file.d_2_depth);
		sprintf(tvin_d_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_2, tvin_d_2);

		// release memory allocation
		delete [] d_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_3, tvin_d_3);

		sc_bv<8>* d_3_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_3
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_3_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_3, "%s\n", (d_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_3, tvin_d_3);
		}

		tcl_file.set_num(1, &tcl_file.d_3_depth);
		sprintf(tvin_d_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_3, tvin_d_3);

		// release memory allocation
		delete [] d_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_4, tvin_d_4);

		sc_bv<8>* d_4_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_4
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_4_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_4, "%s\n", (d_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_4, tvin_d_4);
		}

		tcl_file.set_num(1, &tcl_file.d_4_depth);
		sprintf(tvin_d_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_4, tvin_d_4);

		// release memory allocation
		delete [] d_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_5, tvin_d_5);

		sc_bv<8>* d_5_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_5
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_5_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_5, "%s\n", (d_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_5, tvin_d_5);
		}

		tcl_file.set_num(1, &tcl_file.d_5_depth);
		sprintf(tvin_d_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_5, tvin_d_5);

		// release memory allocation
		delete [] d_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_6, tvin_d_6);

		sc_bv<8>* d_6_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_6
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_6_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_6, "%s\n", (d_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_6, tvin_d_6);
		}

		tcl_file.set_num(1, &tcl_file.d_6_depth);
		sprintf(tvin_d_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_6, tvin_d_6);

		// release memory allocation
		delete [] d_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_7, tvin_d_7);

		sc_bv<8>* d_7_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_7
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_7_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_7, "%s\n", (d_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_7, tvin_d_7);
		}

		tcl_file.set_num(1, &tcl_file.d_7_depth);
		sprintf(tvin_d_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_7, tvin_d_7);

		// release memory allocation
		delete [] d_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_8, tvin_d_8);

		sc_bv<8>* d_8_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_8
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_8_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_8, "%s\n", (d_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_8, tvin_d_8);
		}

		tcl_file.set_num(1, &tcl_file.d_8_depth);
		sprintf(tvin_d_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_8, tvin_d_8);

		// release memory allocation
		delete [] d_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_9, tvin_d_9);

		sc_bv<8>* d_9_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_9
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_9_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_9, "%s\n", (d_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_9, tvin_d_9);
		}

		tcl_file.set_num(1, &tcl_file.d_9_depth);
		sprintf(tvin_d_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_9, tvin_d_9);

		// release memory allocation
		delete [] d_9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_10, tvin_d_10);

		sc_bv<8>* d_10_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_10
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (10) => (10) @ (2)
					for (int i_0 = 10; i_0 <= 10; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_10_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_10, "%s\n", (d_10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_10, tvin_d_10);
		}

		tcl_file.set_num(1, &tcl_file.d_10_depth);
		sprintf(tvin_d_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_10, tvin_d_10);

		// release memory allocation
		delete [] d_10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_11, tvin_d_11);

		sc_bv<8>* d_11_tvin_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: d_11
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: d(7, 0)
				{
					// carray: (11) => (11) @ (2)
					for (int i_0 = 11; i_0 <= 11; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : d[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d[0]
						// regulate_c_name       : d
						// input_type_conversion : d[i_0]
						if (&(d[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> d_tmp_mem;
							d_tmp_mem = d[i_0];
							d_11_tvin_wrapc_buffer[hls_map_index].range(7, 0) = d_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_d_11, "%s\n", (d_11_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_11, tvin_d_11);
		}

		tcl_file.set_num(1, &tcl_file.d_11_depth);
		sprintf(tvin_d_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_11, tvin_d_11);

		// release memory allocation
		delete [] d_11_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_survival_pattern, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_survival_pattern, tvin_survival_pattern);

		sc_bv<16> survival_pattern_tvin_wrapc_buffer;

		// RTL Name: survival_pattern
		{
			// bitslice(15, 0)
			{
				// celement: survival_pattern(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : survival_pattern
						// sub_1st_elem          : 
						// ori_name_1st_elem     : survival_pattern
						// regulate_c_name       : survival_pattern
						// input_type_conversion : survival_pattern
						if (&(survival_pattern) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> survival_pattern_tmp_mem;
							survival_pattern_tmp_mem = survival_pattern;
							survival_pattern_tvin_wrapc_buffer.range(15, 0) = survival_pattern_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_survival_pattern, "%s\n", (survival_pattern_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_survival_pattern, tvin_survival_pattern);
		}

		tcl_file.set_num(1, &tcl_file.survival_pattern_depth);
		sprintf(tvin_survival_pattern, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_survival_pattern, tvin_survival_pattern);

		// [[transaction]]
		sprintf(tvin_codeidx, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_codeidx, tvin_codeidx);

		sc_bv<8> codeidx_tvin_wrapc_buffer;

		// RTL Name: codeidx
		{
			// bitslice(7, 0)
			{
				// celement: codeidx(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : codeidx
						// sub_1st_elem          : 
						// ori_name_1st_elem     : codeidx
						// regulate_c_name       : codeidx
						// input_type_conversion : codeidx
						if (&(codeidx) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> codeidx_tmp_mem;
							codeidx_tmp_mem = codeidx;
							codeidx_tvin_wrapc_buffer.range(7, 0) = codeidx_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_codeidx, "%s\n", (codeidx_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_codeidx, tvin_codeidx);
		}

		tcl_file.set_num(1, &tcl_file.codeidx_depth);
		sprintf(tvin_codeidx, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_codeidx, tvin_codeidx);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		rs_erasure(c, d, survival_pattern, codeidx);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_c_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_c_0, tvout_c_0);

		sc_bv<8>* c_0_tvout_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: c_0
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: c(7, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : c[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : c[0]
						// regulate_c_name       : c
						// input_type_conversion : c[i_0]
						if (&(c[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> c_tmp_mem;
							c_tmp_mem = c[i_0];
							c_0_tvout_wrapc_buffer[hls_map_index].range(7, 0) = c_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_c_0, "%s\n", (c_0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_c_0, tvout_c_0);
		}

		tcl_file.set_num(1, &tcl_file.c_0_depth);
		sprintf(tvout_c_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_c_0, tvout_c_0);

		// release memory allocation
		delete [] c_0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_c_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_c_1, tvout_c_1);

		sc_bv<8>* c_1_tvout_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: c_1
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: c(7, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : c[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : c[0]
						// regulate_c_name       : c
						// input_type_conversion : c[i_0]
						if (&(c[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> c_tmp_mem;
							c_tmp_mem = c[i_0];
							c_1_tvout_wrapc_buffer[hls_map_index].range(7, 0) = c_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_c_1, "%s\n", (c_1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_c_1, tvout_c_1);
		}

		tcl_file.set_num(1, &tcl_file.c_1_depth);
		sprintf(tvout_c_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_c_1, tvout_c_1);

		// release memory allocation
		delete [] c_1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_c_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_c_2, tvout_c_2);

		sc_bv<8>* c_2_tvout_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: c_2
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: c(7, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : c[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : c[0]
						// regulate_c_name       : c
						// input_type_conversion : c[i_0]
						if (&(c[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> c_tmp_mem;
							c_tmp_mem = c[i_0];
							c_2_tvout_wrapc_buffer[hls_map_index].range(7, 0) = c_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_c_2, "%s\n", (c_2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_c_2, tvout_c_2);
		}

		tcl_file.set_num(1, &tcl_file.c_2_depth);
		sprintf(tvout_c_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_c_2, tvout_c_2);

		// release memory allocation
		delete [] c_2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_c_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_c_3, tvout_c_3);

		sc_bv<8>* c_3_tvout_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: c_3
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: c(7, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : c[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : c[0]
						// regulate_c_name       : c
						// input_type_conversion : c[i_0]
						if (&(c[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> c_tmp_mem;
							c_tmp_mem = c[i_0];
							c_3_tvout_wrapc_buffer[hls_map_index].range(7, 0) = c_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_c_3, "%s\n", (c_3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_c_3, tvout_c_3);
		}

		tcl_file.set_num(1, &tcl_file.c_3_depth);
		sprintf(tvout_c_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_c_3, tvout_c_3);

		// release memory allocation
		delete [] c_3_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "c_0"
		delete [] tvout_c_0;
		// release memory allocation: "c_1"
		delete [] tvout_c_1;
		// release memory allocation: "c_2"
		delete [] tvout_c_2;
		// release memory allocation: "c_3"
		delete [] tvout_c_3;
		// release memory allocation: "d_0"
		delete [] tvin_d_0;
		// release memory allocation: "d_1"
		delete [] tvin_d_1;
		// release memory allocation: "d_2"
		delete [] tvin_d_2;
		// release memory allocation: "d_3"
		delete [] tvin_d_3;
		// release memory allocation: "d_4"
		delete [] tvin_d_4;
		// release memory allocation: "d_5"
		delete [] tvin_d_5;
		// release memory allocation: "d_6"
		delete [] tvin_d_6;
		// release memory allocation: "d_7"
		delete [] tvin_d_7;
		// release memory allocation: "d_8"
		delete [] tvin_d_8;
		// release memory allocation: "d_9"
		delete [] tvin_d_9;
		// release memory allocation: "d_10"
		delete [] tvin_d_10;
		// release memory allocation: "d_11"
		delete [] tvin_d_11;
		// release memory allocation: "survival_pattern"
		delete [] tvin_survival_pattern;
		// release memory allocation: "codeidx"
		delete [] tvin_codeidx;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

